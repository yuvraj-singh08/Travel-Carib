// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  password            String
  mobileNumber        String
  gender              String
  dateOfBirth         DateTime
  address             String
  profilePhoto        String
  fullName            String
  nickName            String
  pinCode             String
  cotravellers        CoTravellers[]  @relation("UserCoTravellers")
  additionalEmails    ContactDetail?  //one to one relations
  passportDetails     PassportDetail[]   //one to many relation 
  frequentFlyers      FrequentFlyerDetail[]
}

model CoTravellers {
  id              String  @id @default(uuid())
  userId          String?
  name            String
  email           String
  dateOfBirth     DateTime
  passportNumber  String
  phoneNumber     String
  user            User?    @relation("UserCoTravellers", fields: [userId], references: [id])
}

model ContactDetail {
  id          String  @id @default(uuid())
  userId      String  @unique
  emailId     String
  phoneNumber String
  user        User    @relation(fields: [userId], references: [id])
}

model PassportDetail {
  id            String   @id @default(uuid())
  userId        String   @unique
  passportNumber String
  issuingCountry String
  expiryDate     DateTime
  passportImage  String
  user           User    @relation(fields: [userId], references: [id])

  
}

model FrequentFlyerDetail {
  id              String  @id @default(uuid())
  userId          String
  frequentFlyerNumber String
  airline         String
  user            User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

// one to one relation between passenger and address
model Passenger {
  id                     String      @id @default(uuid())
  firstName              String
  surname                String
  nationality            String
  gender                 String
  dateOfBirth            DateTime
  passportNumber         String
  passportExpiry         DateTime
  address                Address    @relation(fields: [addressId], references: [id])
  addressId              String      @unique    
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
}

model Address {
  id                     String      @id @default(uuid())
  country                String
  state                  String
  city                   String
  zipCode                String
  address                String    
  identityCard           String  
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  passenger              Passenger?  @relation
}
