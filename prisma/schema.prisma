// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  password            String
  mobileNumber        String
  gender              String
  dateOfBirth         DateTime
  address             String
  profilePhoto        String
  fullName            String
  nickName            String
  pinCode             String
  cotravellers        CoTravellers[]  @relation("UserCoTravellers")
  passportDetails     PassportDetail[]   //one to many relation 
  frequentFlyers      FrequentFlyerDetail[] //one to many relation
  passenger           Passenger[] // one to many relation
}

model CoTravellers {
  id              String  @id @default(uuid())
  userId          String?
  name            String
  email           String
  dateOfBirth     DateTime
  passportNumber  String
  phoneNumber     String
  user            User?    @relation("UserCoTravellers", fields: [userId], references: [id])
  @@index([userId])
}

model PassportDetail {
  id            String   @id @default(uuid())
  userId        String   @unique
  passportNumber String
  issuingCountry String
  expiryDate     DateTime
  passportImage  String
  user           User    @relation(fields: [userId], references: [id])
  @@index([userId])
  
}

model FrequentFlyerDetail {
  id              String  @id @default(uuid())
  userId          String
  frequentFlyerNumber String
  airline         String
  user            User    @relation(fields: [userId], references: [id]) 
  @@index([userId])
}

model Passenger {
  id             String    @id @default(uuid())
  userId         String
  firstName      String
  surname        String
  nationality    String
  gender         String
  dateOfBirth    DateTime
  passportNumber String
  passportExpiry DateTime
  country        String
  state          String
  city           String
  zipCode        String
  address        String
  identityCard   String
  bookings       Booking[] 
  user            User    @relation(fields: [userId], references: [id]) 
  @@index([userId])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Booking {
  id            String    @id @default(uuid())
  passengerId   String
  passenger     Passenger @relation(fields: [passengerId], references: [id])
  bookingDate   DateTime
  flightNumber  String
  seatNumber    String
  payment       Payment?  
  paymentId     String?   @unique
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id             String   @id @default(uuid())
  bookingId      String   @unique 
  booking        Booking  @relation(fields: [bookingId], references: [id])
  paymentDate    DateTime
  amount         Float
  currency       String
  paymentMethod  String   
  paymentStatus  String   
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
