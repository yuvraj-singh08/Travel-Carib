generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RouteType {
  ONEWAY
  ROUNDTRIP
  MULTICITY
}

enum UserRole {
  ADMIN
  USER
}

enum FlightType {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST
}

enum ProviderType {
  EMAIL
  GOOGLE
  FACEBOOK
}

model Flight {
  id            String     @id @default(uuid()) @map("_id")
  type          RouteType
  from          String
  to            String
  airline       String
  departureDate DateTime
  flightClass   FlightType
  passengers    Json[]
}

model CoTraveler {
  id          String @id @default(uuid()) @map("_id")
  name        String
  dob         String
  email       String
  passportNo  String
  phoneNumber String
}

model User {
  id              String             @id @default(uuid()) @map("_id")
  firstname       String
  lastname        String
  mobileNumber    String?
  email           String             @unique
  role            UserRole           @default(USER)
  address         String?
  dob             String?
  lastBooking     String?
  country         String?
  gender          String?
  pincode         String?
  avatarSrc       String?
  password        String?
  passportDetails Json?
  isBlocked       Boolean            @default(false)
  coTraveler      Json[]
  frequentlyFlyer Json?
  booked          Booking[]
  provider        String
  ticket          TicketManagement[]
  watchlist       Watchlist[]
  otp             Otp[]
}

model Admin {
  id             String           @id @default(uuid()) @map("_id")
  firstname      String
  lastname       String
  email          String           @unique
  password       String
  role           UserRole         @default(USER)
  otp            Otp[]
  userManagement userManagement[]
}

model Otp {
  id      String  @id @default(uuid()) @map("_id")
  email   String
  otp     String
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Admin   Admin?  @relation(fields: [adminId], references: [id])
  adminId String?

  createdAt DateTime @default(now())
}

model Watchlist {
  id            String @id @default(uuid()) @map("_id")
  userId        String
  flightDetails Json[]
  user          User   @relation(fields: [userId], references: [id])
}

model Passenger {
  id                 String @id @default(uuid()) @map("_id")
  phone              String
  email              String
  firstName          String
  surname            String
  dob                String
  nationality        String
  gender             String
  passportExpiryDate String
  passportNumber     String
  country            String
  state              String
  city               String
  zipcode            String
  address            String
  identityCard       String
}

enum AirlineFeeType {
  PERCENT
  FIXED
}

model AirlineCommision {
  id             String         @id @default(uuid()) @map("_id")
  type           String
  commisionTitle String
  supplier       String
  commissionFees String
  feeType        AirlineFeeType
}

enum TicketStatus {
  OPEN
  PENDING
  RESOLVE
}

model TicketManagement {
  id            String       @id @default(uuid()) @map("_id")
  subject       String
  title         String
  email         String
  requesterName String
  requestedOn   DateTime     @default(now())
  status        TicketStatus
  description   String
  images        String[]
  User          User?        @relation(fields: [userId], references: [id])
  userId        String?
}

enum AdminStatus {
  TICKETED
  PENDING_TICKET
  PENDING_PAYMENT
  EXPIRED
  FAILED_BOOKING
}

enum GDS_TYPE {
  DUFFEL
  AMADEUS
  KIU
}

enum ServiceMode {
  TEST
  PRODUCTION
}

enum Passenger_Type {
  ADULT
  CHILD
  INFANT
}

enum UserStatus {
  PENDING
  COMPLETED
  FAILED
}

model BookPayment {
  id          String     @id @default(uuid()) @map("_id")
  totalAmount Float
  currency    String?
  paymentType String?
  status      UserStatus @default(PENDING)
  paymentDate DateTime   @default(now())
  Booking     Booking    @relation(fields: [bookingId], references: [id])
  bookingId   String     @db.ObjectId
}

model passenger {
  id          String @id @default(uuid()) @map("_id")
  name        String
  dob         String
  email       String
  passportNo  String
  phoneNumber String
}

enum FlightSupplier {
  AMADEUS
  KIUSYS
  DUFFEL
  ALL
  NONE
}

model firewall {
  id             String         @id @default(uuid()) @map("_id")
  title          String
  supplier       FlightSupplier
  code           String
  flightNumber   String
  flightSequence String?
  from           String
  to             String
  updateTime     DateTime       @default(now())
}

model CommissionType {
  id   String @id @default(uuid()) @map("_id")
  type String
}

model commissionManagement {
  id              String         @id @default(uuid()) @map("_id")
  type            String
  commissionTitle String
  supplier        FlightSupplier
  commissionFees  String
  feeType         AirlineFeeType
  updateTime      DateTime       @updatedAt
}

enum Status {
  ACTIVE
  INACTIVE
}

model userManagement {
  id       String @id @default(uuid()) @map("_id")
  uniqueId String @unique
  name     String
  address  String
  email    String
  password String
  contact  String
  roleName String
  status   Status

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  adminId String?
  Admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Role {
  id               String           @id @default(uuid()) @map("_id")
  name             String
  description      String
  permissionGroups Json[]
  userManagement   userManagement[]
}

model Cookie {
  id                        String  @id @default(uuid()) @map("_id")
  cookieToggle              Boolean
  enableLogging             Boolean
  strictlyNecessaryCookies  Boolean
  cookieDescription         String
  cookieTitle               String
  strictlyCookieTitle       String
  strictlyCookieDescription String
  contactUsDescription      String
  contactUsURL              String
}

model EmailSMTP {
  id              String @id @default(uuid()) @map("_id")
  mailDriver      String
  mailDriverHost  String
  mailPort        String
  mailUsername    String
  mailPassword    String
  mailEncryption  String
  mailFromAddress String
  mailFromName    String
}

model SocialSettings {
  id              String  @id @default(uuid()) @map("_id")
  socialsEnable   Boolean
  socialPlatforms Json[]
}

model privacyPolicy {
  id        String  @id @default(uuid()) @map("_id")
  isEnabled Boolean
  content   Json[]
}

model termsAndCondition {
  id        String  @id @default(uuid()) @map("_id")
  isEnabled Boolean
  content   Json[]
}

model deals {
  id           String   @id @default(uuid()) @map("_id")
  title        String
  way          String
  code         String   @unique
  origin       String?
  discount     String
  discountType String
  airlineCode  String?
  userLimit    Int
  used         Int
  flightCode   String?
  expiryDate   String?
  imageUrl     String
  description  String
  userId       String[]
}

model payment {
  id             String   @id @default(uuid()) @map("_id")
  environment    String
  publishableKey String
  secret         String
  webbookSecret  String
  updatedAr      DateTime @updatedAt
}

enum RuleType {
  CREATE_COMBINATION
  COMING_SOON
}

model SearchManagement {
  id                    String         @id @default(uuid()) @map("_id")
  ruleTitle             String
  gdsNdcSupplier        FlightSupplier
  ruleType              RuleType
  journeyType           RouteType
  fromOriginAirport     String
  toDestinationsAirport String
  connectingAirports    Json
  airlinesIncluded      String[]
  airlinesExcluded      String[]
  flightExcluded        String
  minConnectionTime     String
  maxConnectionTime     String
  status                Status
  noteDescription       String
  priority              Int
  fareCodesExcluded     String
  lastUpdate            DateTime       @updatedAt
}

model Blog {
  id            String   @id @default(uuid()) @map("_id")
  mainImg       String
  description   String
  secondaryImg  String[]
  secondaryDesc String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OfferPassengers {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  type                   String
  gds_passenger_id       String[]
  multicity_passenger_id String?
  baggageDetails         Json[]
  offer                  Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId                String   @db.ObjectId
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

enum SubBookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Offer {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  data       String
  passengers OfferPassengers[]
  flightWay  RouteType
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model gdsCreds {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  gds                 GDS_TYPE    @unique
  testApiKey          String
  productionApiKey    String
  productionApiSecret String
  testApiSecret       String
  mode                ServiceMode
}

model SubBooking {
  id        String           @id @default(uuid()) @map("_id")
  status    SubBookingStatus
  ticket    String?
  pnr       String
  bookingId String           @db.ObjectId
  booking   Booking          @relation(fields: [bookingId], references: [id], onDelete: Cascade, name: "BookingToSubBooking")
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  contactDetail Json
  flightDetails String
  payment       BookPayment[]
  passenger     String
  baseFare      Float
  fareSummary   Json
  discount      Json?
  totalAmount   Float
  currency      String
  flight_type   RouteType
  adminStatus   AdminStatus   @default(PENDING_TICKET)
  User          User          @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime      @default(now())
  SubBooking    SubBooking[]  @relation(name: "BookingToSubBooking")
}

model AmadeusOffer {
  id        String   @id @default(uuid()) @map("_id")
  data      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BaggageType {
  CABIN
  CHECKED
}

model BaggageWeight {
  id     String      @id @default(uuid()) @map("_id")
  weight String
  type   BaggageType @unique
}
